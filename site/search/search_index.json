{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Janus Client","text":"<p>Easily send and share WebRTC media through Janus WebRTC server.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Supports HTTP/s and WebSockets communication with Janus.</li> <li>Support Admin/Monitor API:</li> <li>Generic requests</li> <li>Configuration related requests</li> <li>Token related requests</li> <li>Supports Janus plugin:</li> <li>EchoTest Plugin</li> <li>VideoCall Plugin</li> <li>VideoRoom Plugin</li> <li>Extendable Transport class and Plugin class</li> </ul>"},{"location":"#library-installation","title":"Library Installation","text":"<pre><code>pip install janus-client\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#simple-connect-and-disconnect","title":"Simple Connect And Disconnect","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusEchoTestPlugin, JanusVideoRoomPlugin\n\n# Protocol will be derived from base_url\nbase_url = \"wss://janusmy.josephgetmyip.com/janusbasews/janus\"\n# OR\nbase_url = \"https://janusmy.josephgetmyip.com/janusbase/janus\"\n\nsession = JanusSession(base_url=base_url)\n\nplugin_handle = JanusEchoTestPlugin()\n\n# Attach to Janus session\nawait plugin_handle.attach(session=session)\n\n# Destroy plugin handle\nawait plugin_handle.destroy()\n</code></pre> <p>This will create a plugin handle and then destroy it.</p> <p>Notice that we don't need to call connect or disconnect explicitly. It's managed internally.</p>"},{"location":"#make-video-calls","title":"Make Video Calls","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusVideoCallPlugin\nfrom aiortc.contrib.media import MediaPlayer, MediaRecorder\n\nasync def main():\n   # Create session\n   session = JanusSession(\n      base_url=\"wss://janusmy.josephgetmyip.com/janusbasews/janus\",\n   )\n\n   # Create plugin\n   plugin_handle = JanusVideoCallPlugin()\n\n   # Attach to Janus session\n   await plugin_handle.attach(session=session)\n\n   # Prepare username and media stream\n   username = \"testusernamein\"\n   username_out = \"testusernameout\"\n\n   player = MediaPlayer(\n      \"desktop\",\n      format=\"gdigrab\",\n      options={\n            \"video_size\": \"640x480\",\n            \"framerate\": \"30\",\n            \"offset_x\": \"20\",\n            \"offset_y\": \"30\",\n      },\n   )\n   recorder = MediaRecorder(\"./videocall_record_out.mp4\")\n\n   # Register myself as testusernameout\n   result = await plugin_handle.register(username=username_out)\n\n   # Call testusernamein\n   result = await plugin_handle.call(\n      username=username, player=player, recorder=recorder\n   )\n\n   # Wait awhile then hangup\n   await asyncio.sleep(30)\n\n   result = await plugin_handle.hangup()\n\n   # Destroy plugin\n   await plugin_handle.destroy()\n\n   # Destroy session\n   await session.destroy()\n\n\nif __name__ == \"__main__\":\n   try:\n      asyncio.run(main())\n   except KeyboardInterrupt:\n      pass\n</code></pre> <p>This example will register to the VideoCall plugin using username <code>testusernameout</code>. It will then call the user registered using the username <code>testusernamein</code>.</p> <p>A portion of the screen will be captured and sent in the call media stream. The incoming media stream will be saved into <code>videocall_record_out.mp4</code> file.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>Janus plugins provide specific functionality for different use cases. This library includes support for several core Janus plugins.</p>"},{"location":"plugins/#videoroom-plugin","title":"VideoRoom Plugin","text":""},{"location":"plugins/#janusvideoroomplugin","title":"<code>JanusVideoRoomPlugin</code>","text":"<p>Plugin for multi-party video conferencing using Janus VideoRoom plugin.</p>"},{"location":"plugins/#methods","title":"Methods","text":""},{"location":"plugins/#join_roomroom_id-username-pinnone","title":"<code>join_room(room_id, username, pin=None)</code>","text":"<pre><code>async def join_room(room_id: int, username: str, pin: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Join a video room.</p> <p>Parameters: - <code>room_id</code> (int): The ID of the room to join - <code>username</code> (str): Username to use in the room - <code>pin</code> (Optional[str]): Optional room PIN for protected rooms</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#leave_room","title":"<code>leave_room()</code>","text":"<pre><code>async def leave_room() -&gt; Dict[str, Any]\n</code></pre> <p>Leave the current video room.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#publishplayer","title":"<code>publish(player)</code>","text":"<pre><code>async def publish(player: MediaPlayer) -&gt; Dict[str, Any]\n</code></pre> <p>Start publishing media to the room.</p> <p>Parameters: - <code>player</code> (MediaPlayer): Media player instance for input media</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#unpublish","title":"<code>unpublish()</code>","text":"<pre><code>async def unpublish() -&gt; Dict[str, Any]\n</code></pre> <p>Stop publishing media to the room.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#subscribefeed_id-recordernone","title":"<code>subscribe(feed_id, recorder=None)</code>","text":"<pre><code>async def subscribe(feed_id: int, recorder: Optional[MediaRecorder] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Subscribe to a publisher's media feed.</p> <p>Parameters: - <code>feed_id</code> (int): The feed ID to subscribe to - <code>recorder</code> (Optional[MediaRecorder]): Optional recorder for saving received media</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#unsubscribe","title":"<code>unsubscribe()</code>","text":"<pre><code>async def unsubscribe() -&gt; Dict[str, Any]\n</code></pre> <p>Unsubscribe from the current media feed.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusVideoRoomPlugin\nfrom aiortc.contrib.media import MediaPlayer, MediaRecorder\n\nasync def main():\n    session = JanusSession(base_url=\"wss://example.com/janus\")\n    plugin = JanusVideoRoomPlugin()\n\n    async with session:\n        await plugin.attach(session)\n\n        # Join room\n        await plugin.join_room(room_id=1234, username=\"user1\")\n\n        # Start publishing\n        player = MediaPlayer(\"video.mp4\")\n        await plugin.publish(player)\n\n        # Subscribe to another feed\n        recorder = MediaRecorder(\"output.mp4\")\n        await plugin.subscribe(feed_id=5678, recorder=recorder)\n\n        # Wait and then cleanup\n        await asyncio.sleep(30)\n        await plugin.unpublish()\n        await plugin.leave_room()\n        await plugin.destroy()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"plugins/#videocall-plugin","title":"VideoCall Plugin","text":""},{"location":"plugins/#janusvideocallplugin","title":"<code>JanusVideoCallPlugin</code>","text":"<p>Plugin for one-to-one video calls using Janus VideoCall plugin.</p>"},{"location":"plugins/#methods_1","title":"Methods","text":""},{"location":"plugins/#registerusername","title":"<code>register(username)</code>","text":"<pre><code>async def register(username: str) -&gt; Dict[str, Any]\n</code></pre> <p>Register with the VideoCall plugin using a username.</p> <p>Parameters: - <code>username</code> (str): Username to register with</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#callusername-playernone-recordernone","title":"<code>call(username, player=None, recorder=None)</code>","text":"<pre><code>async def call(username: str, player: Optional[MediaPlayer] = None, recorder: Optional[MediaRecorder] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Make a call to another user.</p> <p>Parameters: - <code>username</code> (str): Username of the user to call - <code>player</code> (Optional[MediaPlayer]): Media player for outgoing media - <code>recorder</code> (Optional[MediaRecorder]): Media recorder for incoming media</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#acceptplayernone-recordernone","title":"<code>accept(player=None, recorder=None)</code>","text":"<pre><code>async def accept(player: Optional[MediaPlayer] = None, recorder: Optional[MediaRecorder] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Accept an incoming call.</p> <p>Parameters: - <code>player</code> (Optional[MediaPlayer]): Media player for outgoing media - <code>recorder</code> (Optional[MediaRecorder]): Media recorder for incoming media</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#hangup","title":"<code>hangup()</code>","text":"<pre><code>async def hangup() -&gt; Dict[str, Any]\n</code></pre> <p>Hang up the current call.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#usage-example_1","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusVideoCallPlugin\nfrom aiortc.contrib.media import MediaPlayer, MediaRecorder\n\nasync def main():\n    session = JanusSession(base_url=\"wss://example.com/janus\")\n    plugin = JanusVideoCallPlugin()\n\n    async with session:\n        await plugin.attach(session)\n\n        # Register\n        await plugin.register(username=\"caller\")\n\n        # Make a call\n        player = MediaPlayer(\"input.mp4\")\n        recorder = MediaRecorder(\"output.mp4\")\n        await plugin.call(username=\"callee\", player=player, recorder=recorder)\n\n        # Wait for call duration\n        await asyncio.sleep(30)\n\n        # Hang up\n        await plugin.hangup()\n        await plugin.destroy()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"plugins/#echotest-plugin","title":"EchoTest Plugin","text":""},{"location":"plugins/#janusechotestplugin","title":"<code>JanusEchoTestPlugin</code>","text":"<p>Plugin for testing WebRTC connectivity using Janus EchoTest plugin.</p>"},{"location":"plugins/#methods_2","title":"Methods","text":""},{"location":"plugins/#startinput_filenone-output_filenone","title":"<code>start(input_file=None, output_file=None)</code>","text":"<pre><code>async def start(input_file: Optional[str] = None, output_file: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Start the echo test.</p> <p>Parameters: - <code>input_file</code> (Optional[str]): Path to input media file - <code>output_file</code> (Optional[str]): Path to save output media</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#stop","title":"<code>stop()</code>","text":"<pre><code>async def stop() -&gt; Dict[str, Any]\n</code></pre> <p>Stop the echo test.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#usage-example_2","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusEchoTestPlugin\n\nasync def main():\n    session = JanusSession(base_url=\"wss://example.com/janus\")\n    plugin = JanusEchoTestPlugin()\n\n    async with session:\n        await plugin.attach(session)\n\n        # Start echo test\n        await plugin.start(input_file=\"input.mp4\", output_file=\"echo_output.mp4\")\n\n        # Let it run for a while\n        await asyncio.sleep(10)\n\n        # Stop echo test\n        await plugin.stop()\n        await plugin.destroy()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"plugins/#base-class","title":"Base Class","text":""},{"location":"plugins/#janusplugin","title":"<code>JanusPlugin</code>","text":"<p>Base class for all Janus plugins. All plugin implementations inherit from this class.</p>"},{"location":"plugins/#methods_3","title":"Methods","text":""},{"location":"plugins/#attachsession","title":"<code>attach(session)</code>","text":"<pre><code>async def attach(session: JanusSession) -&gt; Dict[str, Any]\n</code></pre> <p>Attach this plugin to a Janus session.</p> <p>Parameters: - <code>session</code> (JanusSession): The session to attach to</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#destroy","title":"<code>destroy()</code>","text":"<pre><code>async def destroy() -&gt; Dict[str, Any]\n</code></pre> <p>Destroy the plugin handle and clean up resources.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#sendmessage-jsepnone","title":"<code>send(message, jsep=None)</code>","text":"<pre><code>async def send(message: Dict[str, Any], jsep: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Send a message to the plugin.</p> <p>Parameters: - <code>message</code> (Dict[str, Any]): The message to send - <code>jsep</code> (Optional[Dict[str, Any]]): Optional JSEP (WebRTC signaling) data</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#tricklecandidate","title":"<code>trickle(candidate)</code>","text":"<pre><code>async def trickle(candidate: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Send an ICE candidate to the plugin.</p> <p>Parameters: - <code>candidate</code> (Dict[str, Any]): ICE candidate data</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"plugins/#properties","title":"Properties","text":"<ul> <li><code>id</code> (Optional[int]): The plugin handle ID assigned by Janus</li> <li><code>session</code> (Optional[JanusSession]): The session this plugin is attached to</li> </ul>"},{"location":"session/","title":"Session","text":"<p>Create a session object that can be shared between plugin handles</p>"},{"location":"session/#session-class","title":"Session Class","text":""},{"location":"session/#janussession","title":"<code>JanusSession</code>","text":"<p>The main session class for connecting to Janus WebRTC Gateway.</p>"},{"location":"session/#constructor","title":"Constructor","text":"<pre><code>JanusSession(base_url: str, **kwargs)\n</code></pre> <p>Parameters: - <code>base_url</code> (str): The base URL of the Janus server (e.g., \"wss://example.com/janus\" or \"https://example.com/janus\") - <code>**kwargs</code>: Additional keyword arguments passed to the transport layer</p>"},{"location":"session/#methods","title":"Methods","text":""},{"location":"session/#create","title":"<code>create()</code>","text":"<pre><code>async def create() -&gt; Dict[str, Any]\n</code></pre> <p>Create a new session with the Janus server.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server containing session information</p>"},{"location":"session/#destroy","title":"<code>destroy()</code>","text":"<pre><code>async def destroy() -&gt; Dict[str, Any]\n</code></pre> <p>Destroy the session and clean up resources.</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server confirming destruction</p>"},{"location":"session/#sendmessage-timeoutnone","title":"<code>send(message, timeout=None)</code>","text":"<pre><code>async def send(message: Dict[str, Any], timeout: Optional[float] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Send a message to the Janus server.</p> <p>Parameters: - <code>message</code> (Dict[str, Any]): The message to send - <code>timeout</code> (Optional[float]): Timeout in seconds for the operation</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server</p>"},{"location":"session/#attach_pluginplugin","title":"<code>attach_plugin(plugin)</code>","text":"<pre><code>async def attach_plugin(plugin: JanusPlugin) -&gt; Dict[str, Any]\n</code></pre> <p>Attach a plugin to this session.</p> <p>Parameters: - <code>plugin</code> (JanusPlugin): The plugin instance to attach</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server containing plugin handle information</p>"},{"location":"session/#detach_pluginplugin","title":"<code>detach_plugin(plugin)</code>","text":"<pre><code>async def detach_plugin(plugin: JanusPlugin) -&gt; Dict[str, Any]\n</code></pre> <p>Detach a plugin from this session.</p> <p>Parameters: - <code>plugin</code> (JanusPlugin): The plugin instance to detach</p> <p>Returns: - <code>Dict[str, Any]</code>: Response from Janus server confirming detachment</p>"},{"location":"session/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession, JanusEchoTestPlugin\n\nasync def main():\n    # Create session\n    session = JanusSession(base_url=\"wss://example.com/janus\")\n\n    try:\n        # Use session as async context manager for automatic cleanup\n        async with session:\n            # Create and attach plugin\n            plugin = JanusEchoTestPlugin()\n            await plugin.attach(session)\n\n            # Use plugin...\n\n            # Plugin will be automatically destroyed when session closes\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"transport/","title":"Transport","text":"<p>Transport method is detected using regex on base_url parameter passed to Session object.</p>"},{"location":"transport/#base-class","title":"Base Class","text":""},{"location":"transport/#janustransport","title":"<code>JanusTransport</code>","text":"<p>Base class for all transport implementations. Transport classes handle the actual communication with the Janus server.</p>"},{"location":"transport/#constructor","title":"Constructor","text":"<pre><code>JanusTransport(base_url: str, **kwargs)\n</code></pre> <p>Parameters: - <code>base_url</code> (str): The base URL of the Janus server - <code>**kwargs</code>: Additional transport-specific configuration options</p>"},{"location":"transport/#methods","title":"Methods","text":""},{"location":"transport/#_connect","title":"<code>_connect()</code>","text":"<pre><code>async def _connect() -&gt; None\n</code></pre> <p>Establish connection to the Janus server. This is an abstract method that must be implemented by subclasses.</p>"},{"location":"transport/#_disconnect","title":"<code>_disconnect()</code>","text":"<pre><code>async def _disconnect() -&gt; None\n</code></pre> <p>Close the connection to the Janus server. This is an abstract method that must be implemented by subclasses.</p>"},{"location":"transport/#_sendmessage","title":"<code>_send(message)</code>","text":"<pre><code>async def _send(message: Dict[str, Any]) -&gt; None\n</code></pre> <p>Send a message to the Janus server. This is an abstract method that must be implemented by subclasses.</p> <p>Parameters: - <code>message</code> (Dict[str, Any]): The message to send</p>"},{"location":"transport/#info","title":"<code>info()</code>","text":"<pre><code>async def info() -&gt; Dict[str, Any]\n</code></pre> <p>Get server information from Janus.</p> <p>Returns: - <code>Dict[str, Any]</code>: Server information response</p>"},{"location":"transport/#ping","title":"<code>ping()</code>","text":"<pre><code>async def ping() -&gt; Dict[str, Any]\n</code></pre> <p>Send a ping to the Janus server to check connectivity.</p> <p>Returns: - <code>Dict[str, Any]</code>: Ping response</p>"},{"location":"transport/#dispatch_session_createdsession","title":"<code>dispatch_session_created(session)</code>","text":"<pre><code>def dispatch_session_created(session: JanusSession) -&gt; None\n</code></pre> <p>Notify the transport that a session has been created.</p> <p>Parameters: - <code>session</code> (JanusSession): The created session</p>"},{"location":"transport/#dispatch_session_destroyedsession","title":"<code>dispatch_session_destroyed(session)</code>","text":"<pre><code>def dispatch_session_destroyed(session: JanusSession) -&gt; None\n</code></pre> <p>Notify the transport that a session has been destroyed.</p> <p>Parameters: - <code>session</code> (JanusSession): The destroyed session</p>"},{"location":"transport/#register_transporttransport_class","title":"<code>register_transport(transport_class)</code>","text":"<pre><code>@staticmethod\ndef register_transport(transport_class: Type[JanusTransport]) -&gt; None\n</code></pre> <p>Register a transport class for automatic detection.</p> <p>Parameters: - <code>transport_class</code> (Type[JanusTransport]): The transport class to register</p>"},{"location":"transport/#create_transportbase_url-kwargs","title":"<code>create_transport(base_url, **kwargs)</code>","text":"<pre><code>@staticmethod\ndef create_transport(base_url: str, **kwargs) -&gt; JanusTransport\n</code></pre> <p>Create a transport instance based on the base URL.</p> <p>Parameters: - <code>base_url</code> (str): The base URL to determine transport type - <code>**kwargs</code>: Additional configuration options</p> <p>Returns: - <code>JanusTransport</code>: The appropriate transport instance</p>"},{"location":"transport/#http-transport","title":"HTTP Transport","text":""},{"location":"transport/#janustransporthttp","title":"<code>JanusTransportHTTP</code>","text":"<p>HTTP/HTTPS transport implementation for communicating with Janus server over HTTP.</p>"},{"location":"transport/#features","title":"Features","text":"<ul> <li>Supports both HTTP and HTTPS protocols</li> <li>Uses long polling for receiving messages</li> <li>Automatic session management</li> <li>Connection pooling for efficiency</li> </ul>"},{"location":"transport/#url-format","title":"URL Format","text":"<pre><code>http://example.com/janus\nhttps://example.com/janus\n</code></pre>"},{"location":"transport/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession\n\nasync def main():\n    # HTTP transport will be automatically selected\n    session = JanusSession(base_url=\"https://example.com/janus\")\n\n    async with session:\n        # Transport handles all HTTP communication\n        info = await session.transport.info()\n        print(f\"Server info: {info}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"transport/#websocket-transport","title":"WebSocket Transport","text":""},{"location":"transport/#janustransportwebsocket","title":"<code>JanusTransportWebsocket</code>","text":"<p>WebSocket transport implementation for real-time communication with Janus server.</p>"},{"location":"transport/#features_1","title":"Features","text":"<ul> <li>Full-duplex communication</li> <li>Real-time message delivery</li> <li>Automatic reconnection handling</li> <li>Lower latency than HTTP transport</li> </ul>"},{"location":"transport/#url-format_1","title":"URL Format","text":"<pre><code>ws://example.com/janus\nwss://example.com/janus\n</code></pre>"},{"location":"transport/#usage-example_1","title":"Usage Example","text":"<pre><code>import asyncio\nfrom janus_client import JanusSession\n\nasync def main():\n    # WebSocket transport will be automatically selected\n    session = JanusSession(base_url=\"wss://example.com/janus\")\n\n    async with session:\n        # Transport handles all WebSocket communication\n        ping_response = await session.transport.ping()\n        print(f\"Ping response: {ping_response}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"transport/#transport-selection","title":"Transport Selection","text":"<p>The transport is automatically selected based on the URL scheme:</p> URL Scheme Transport Class <code>http://</code> <code>JanusTransportHTTP</code> <code>https://</code> <code>JanusTransportHTTP</code> <code>ws://</code> <code>JanusTransportWebsocket</code> <code>wss://</code> <code>JanusTransportWebsocket</code>"},{"location":"transport/#custom-transport-implementation","title":"Custom Transport Implementation","text":"<p>You can create custom transport implementations by inheriting from <code>JanusTransport</code>:</p> <pre><code>from janus_client import JanusTransport\nfrom typing import Dict, Any\n\nclass MyCustomTransport(JanusTransport):\n    def __init__(self, base_url: str, **kwargs):\n        super().__init__(base_url, **kwargs)\n        # Initialize custom transport\n\n    async def _connect(self) -&gt; None:\n        # Implement connection logic\n        pass\n\n    async def _disconnect(self) -&gt; None:\n        # Implement disconnection logic\n        pass\n\n    async def _send(self, message: Dict[str, Any]) -&gt; None:\n        # Implement message sending\n        pass\n\n# Register the custom transport\ndef protocol_matcher(base_url: str) -&gt; bool:\n    return base_url.startswith(\"mycustom://\")\n\n# Register with the transport system\nJanusTransport.register_transport(MyCustomTransport)\n</code></pre>"},{"location":"transport/#error-handling","title":"Error Handling","text":"<p>All transport implementations handle common error scenarios:</p> <ul> <li>Connection failures: Automatic retry with exponential backoff</li> <li>Network timeouts: Configurable timeout values</li> <li>Protocol errors: Proper error reporting and recovery</li> <li>Server disconnections: Automatic reconnection attempts</li> </ul>"},{"location":"transport/#configuration-options","title":"Configuration Options","text":"<p>Transport classes accept various configuration options:</p> <pre><code>session = JanusSession(\n    base_url=\"wss://example.com/janus\",\n    # Transport-specific options\n    timeout=30.0,           # Request timeout in seconds\n    max_retries=3,          # Maximum retry attempts\n    retry_delay=1.0,        # Initial retry delay\n    keepalive_interval=30,  # Keepalive ping interval\n)\n</code></pre>"}]}